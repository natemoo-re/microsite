import { startDevServer, loadAndValidateConfig } from 'snowpack';
import { resolve } from 'path';
import type { IncomingMessage, ServerResponse } from 'http';
import polka from 'polka';

const pageScript = (page: string) => `import { csr } from '/web_modules/microsite/runtime/csr.js';
import Page from '${page}';
csr(Page);`;

const globalScript = () => `(async () => {
    try {
        const global = await import('/src/global.js').then(mod => mod.default);
        if (global) global();
    } catch (e) {}
    try { await import('/src/global.css.proxy.js'); } catch (e) {}

    document.documentElement.style.removeProperty('visibility');
})()`;

const doc = (page: string) => `<!doctype html>\n<!-- Generated by microsite -->\n<html lang="en" dir="ltr" style="visibility:hidden">\n\t<head></head>\n\t<body>
\t\t<div id="__microsite"></div>
\t\t<script data-csr="true">window.HMR_WEBSOCKET_URL = 'ws://localhost:3333';</script>
\t\t<script type="module" src="/__snowpack__/hmr-client.js"></script>
\t\t<script type="module" data-microsite="page">${pageScript(page)}</script>
\t\t<script type="module" data-microsite="global">${globalScript()}</script>
</body>\n</html>`

export async function dev() {
    const cwd = process.cwd();
    const config = loadAndValidateConfig({ config: resolve(import.meta.url.slice('file:'.length), '../../snowpack.config.cjs') }, {});
    const snowpack = await startDevServer({
        cwd,
        config,
        lockfile: null,
        pkgManifest: null
    });

    const server = polka()
        .use(async (req: IncomingMessage, res: ServerResponse, next: any) => {
            if (req.url?.endsWith('.js')) {
                res.setHeader('Content-Type', 'application/javascript');
            }
            next();
        })
        .use(async (req: IncomingMessage, res: ServerResponse, next: any) => {
            if (!(req.url.endsWith('.html') || req.url.indexOf('.') === -1)) return next();

            let base = req.url.slice(1);
            if (base.endsWith('.html')) base = base.slice(0, '.html'.length * -1);
            if (base === '') base = 'index';

            const loadAndSSR = async (base: string) => {
                try {
                    const url = `/src/pages/${base}.js`;
                    const result = await snowpack.loadUrl(url);
                    if (!result) throw new Error();
                    res.setHeader('Content-Type', 'text/html');
                    res.end(doc(url));
                    return true;
                } catch (err) {
                    console.error(err);
                }
                return false;
            }

            const direct = await loadAndSSR(base);
            if (!direct) await loadAndSSR(`${base}/index`);
            next();
        })
        .use(async (req: IncomingMessage, res: ServerResponse, next: any) => {
            try {
                // Respond directly if asset is found
                const result = await snowpack.loadUrl(req.url);
                if (result.contentType) res.setHeader('Content-Type', result.contentType);
                res.end(result.contents);
            } catch (err) {}
            next();
        })
        .use(async (_req: IncomingMessage, res: ServerResponse, next: any) => {
            res.statusCode = 404;
            res.end();
            next();
        })
        server.listen(8080, (err) => {
                if (err) throw err;
                console.log(`  http://localhost:8080\n  Microsite server started.`);
        })
}
